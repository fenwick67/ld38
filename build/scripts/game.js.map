{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src\\controllers\\FullscreenController.js",
    "src\\controllers\\LevelController.js",
    "src\\index.js",
    "src\\objects\\CurvyShader.js",
    "src\\objects\\Player.js",
    "src\\objects\\RainbowText.js",
    "src\\states\\LoadingState.js",
    "src\\states\\PlayingState.js"
  ],
  "names": [],
  "mappings": "AAAA;;;;;;;;;;;;;;;;;;;;;;;I,ACAM,mCACJ;kCAAA,AAAY,MAAK;oBAAA;;8BACf;;aAAA,AAAK,OAAL,AAAY,AAEZ;;AACA;aAAA,AAAK,KAAK,SAAA,AAAS,cAAnB,AAAU,AAAuB,AACjC;aAAA,AAAK,GAAL,AAAQ,UAAR,AAAkB,IAAlB,AAAsB,AAEtB;;YAAI,OAAO,SAAA,AAAS,cAApB,AAAW,AAAuB,AAClC;aAAA,AAAK,cAAL,AAAiB,AACjB;aAAA,AAAK,GAAL,AAAQ,YAAR,AAAoB,AAEpB;;YAAI,MAAM,SAAA,AAAS,gBAAT,AAAyB,8BAAnC,AAAU,AAAsD,AAChE;YAAA,AAAI,aAAJ,AAAiB,SAAjB,AAA0B,AAC1B;YAAA,AAAI,aAAJ,AAAiB,UAAjB,AAA2B,AAC3B;YAAA,AAAI,aAAJ,AAAiB,WAAjB,AAA2B,AAC3B;YAAA,AAAI,aAAJ,AAAiB,WAAjB,AAA4B,AAC5B;YAAA,AAAI,YAIJ;aAAA,AAAK,GAAL,AAAQ,YAAR,AAAoB,AAEpB;;aAAA,AAAK,GAAL,AAAQ,iBAAR,AAAyB,SAAQ,YAAA;mBAAI,MAAJ,AAAI,AAAK;AAA1C,AACA;iBAAA,AAAS,eAAT,AAAwB,iBAAxB,AAAyC,YAAY,KAArD,AAA0D,AAE3D;;;;;iCAGQ,AACP;gBAAI,KAAA,AAAK,KAAL,AAAU,MAAd,AAAoB,cAAa,AAC7B;qBAAA,AAAK,KAAL,AAAU,MAAV,AAAgB,AAChB;qBAAA,AAAK,KAAL,AAAU,OAAV,AAAiB,UAAjB,AAA2B,IAA3B,AAA+B,AAClC;AAHD,mBAII,AACA;qBAAA,AAAK,KAAL,AAAU,MAAV,AAAgB,sBAAsB,OAAA,AAAO,aAA7C,AAA0D,AAC1D;qBAAA,AAAK,KAAL,AAAU,MAAV,AAAgB,gBAAhB,AAAgC,AAChC;qBAAA,AAAK,KAAL,AAAU,OAAV,AAAiB,UAAjB,AAA2B,OAA3B,AAAkC,AACrC;AACF;;;;;;;kB,AAKY;;;;;;;;;;;;;;;I,AC5CT,kBACJ,yBAAA,AAAY,MAAK;wBACf;;OAAA,AAAK,OAAL,AAAY,AACb;A;;kB,AAGY;;;;;ACNf;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;I,AAEM;kBAEL;;kBAAc;0BACb;;QAAI;aAAS,AACF,AACP;cAFS,AAED,AACR;gBAAU,OAHD,AAGQ,AACjB;iBAJS,AAIE,AACb;kBALW,AAKA,AACT;oBANS,AAMK,AAChB;cARW,AACb,AAAa,AAOJ;AAPI,AACT;;4GAFS,AAUP,AACN;;UAAA,AAAK,uBAAuB,mCAA5B,AAEA;;UAAA,AAAK,MAAL,AAAW,IAAX,AAAe,wCAAf,AAA6C,AAC7C;UAAA,AAAK,MAAL,AAAW,IAAX,AAAe,wCAAf,AAA6C,AAE7C;;UAAA,AAAK,MAAL,AAAW,MAAX,AAAiB,AACjB;WAAA,AAAO,QAjBM,AAiBb,AAAe;;WAEf;;;;EArBiB,O,AAAO;;AAyB1B,OAAA,AAAO,OAAO,IAAd,AAAc,AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;I,AC/BZ;2BACJ;;yBAAA,AAAY,MAAK;8BAAA;;8HAAA,AACP,AAEN;;cAAA,AAAK,OAAL,AAAY,AACZ;cAAA,AAAK,SAAL,AAAc,SAAS,EAAE,MAAF,AAAQ,MAAM,OAArC,AAAuB,AAAqB,AAC5C;cAAA,AAAK,SAAL,AAAc,YAAY,EAAE,MAAF,AAAQ,MAAM,OAAO,EAAE,GAAF,AAAK,KAAK,GAAzD,AAA0B,AAAqB,AAAa,AAC5D;cAAA,AAAK,SAAL,AAAc,aAAa,EAAE,MAAF,AAAQ,MAAM,OAAO,EAAE,GAAF,AAAK,QAAQ,GAA7D,AAA2B,AAAqB,AAAgB,AAEhE;;cAAA,AAAK,SAAL,AAAc,OAAO,EAAE,MAAF,AAAQ,MAAM,OAAnC,AAAqB,AAAqB,AAC1C;cAAA,AAAK,SAAL,AAAc,SAAS,EAAE,MAAF,AAAQ,MAAM,OAArC,AAAuB,AAAqB,AAE5C;;cAAA,AAAK,cAXQ;;eAyChB;;;;EA1CuB,O,AAAO;;AA8CjC;;;;;;;AAMA,OAAA,AAAO,eAAe,YAAtB,AAAkC,WAAlC,AAA6C;SACpC,eAAW,AAEZ;;eAAO,KAAA,AAAK,SAAL,AAAc,UAArB,AAA+B,AAElC;AALgD,AAOjD;;SAAK,aAAA,AAAS,OAAO,AAEjB;;aAAA,AAAK,QAAL,AAAa,AACb;aAAA,AAAK,SAAL,AAAc,UAAd,AAAwB,QAAxB,AAAgC,AAEnC;AAZL,AAAqD;AAAA,AACjD;;AAcJ;;;;;;AAMA,OAAA,AAAO,eAAe,YAAtB,AAAkC,WAAlC,AAA6C;SACpC,eAAW,AACZ;eAAO,KAAA,AAAK,SAAL,AAAc,UAAd,AAAwB,MAA/B,AAAqC,AACxC;AAHiD,AAKlD;;SAAK,aAAA,AAAS,OAAO,AACjB;aAAA,AAAK,QAAL,AAAa,AACb;aAAA,AAAK,SAAL,AAAc,UAAd,AAAwB,MAAxB,AAA8B,IAA9B,AAAkC,AACrC;AARL,AAAsD;AAAA,AAClD;;AAUJ;;;;;;AAMA,OAAA,AAAO,eAAe,YAAtB,AAAkC,WAAlC,AAA6C;SACpC,eAAW,AACZ;eAAO,KAAA,AAAK,SAAL,AAAc,UAAd,AAAwB,MAA/B,AAAqC,AACxC;AAHiD,AAIlD;SAAK,aAAA,AAAS,OAAO,AACjB;aAAA,AAAK,QAAL,AAAa,AACb;aAAA,AAAK,SAAL,AAAc,UAAd,AAAwB,MAAxB,AAA8B,IAA9B,AAAkC,AACrC;AAPL,AAAsD;AAAA,AAClD;;AASJ;;;;;;AAMA,OAAA,AAAO,eAAe,YAAtB,AAAkC,WAAlC,AAA6C;SACpC,eAAW,AACZ;eAAO,KAAA,AAAK,SAAL,AAAc,KAArB,AAA0B,AAC7B;AAHgD,AAIjD;SAAK,aAAA,AAAS,OAAO,AACjB;aAAA,AAAK,QAAL,AAAa,AACb;aAAA,AAAK,SAAL,AAAc,KAAd,AAAmB,QAAnB,AAA2B,AAC9B;AAPL,AAAqD;AAAA,AACjD;;AASJ;;;;;;AAMA,OAAA,AAAO,eAAe,YAAtB,AAAkC,WAAlC,AAA6C;SACpC,eAAW,AACZ;eAAO,KAAA,AAAK,SAAL,AAAc,OAArB,AAA4B,AAC/B;AAHkD,AAInD;SAAK,aAAA,AAAS,OAAO,AACjB;aAAA,AAAK,QAAL,AAAa,AACb;aAAA,AAAK,SAAL,AAAc,OAAd,AAAqB,QAArB,AAA6B,AAChC;AAPL,AAAuD;AAAA,AACnD;;kB,AAaW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;I,ACxIT;oBAEJ;;kBAAA,AAAY,MAAZ,AAAiB,KAAjB,AAAqB;0BAAM;;gHAAA,AACnB,MADmB,AACd,GADc,AACZ,GADY,AACV,aADU,AACE,AAC3B;;UAAA,AAAK,OAAL,AAAY,AAEZ;;AACA;UAAA,AAAK,QAAL,AAAW,AACX;UAAA,AAAK,YAAL,AAAiB,AACjB;UAAA,AAAK,OAAL,AAAY,AACZ;UAAA,AAAK,OAAL,AAAY,AAEZ;;AACA;SAAA,AAAK,QAAL,AAAa,GAAb,AAAgB,OAChB;UAAA,AAAK,KAAL,AAAU,OAAO,MAAjB,AAAsB,AACxB;SAAA,AAAK,QAAL,AAAa,GAAb,AAAgB,OAChB;UAAA,AAAK,OAAL,AAAY,MAAZ,AAAkB,KAdS,AAc3B,AAAsB,KAdK,CAcC,AAC5B;UAAA,AAAK,KAAL,AAAU,UAAU,MAApB,AAAyB,MAAzB,AAA8B,GAA9B,AAAgC,AAChC;UAAA,AAAK,KAAL,AAAU,gBAAV,AAAwB,AAGtB;;AACA;UAAA,AAAK,UAAU,MAAA,AAAK,KAAL,AAAU,MAAV,AAAgB,SApBN,AAoBzB,AAAe,AAAyB;;WAEzC;;;;;6BAEO,AACN;UAAI,UAAU,KAAd,AAAmB,AACnB;UAAI,SAAJ,AAAa,AACb;UAAI,WAAW,aAAf,AAAe,AAAa,AAC5B;UAAI,WAAJ,AAAe,AACf;AAEA;;UAAI,QAAA,AAAQ,KAAZ,AAAiB;AACT;eAAA,AAAO,MAAP,AAAa,IAAI,CADA,AACjB,AAAkB,EADD,AAAI,CACC,AACtB;mBAAW,CAAA,AAAC,IAAE,OAAd,AAAqB,AACrB;AAEP;AALD,iBAMS,QAAA,AAAQ,MAAZ,AAAkB,QAAQ,AAAC;AACxB;eAAA,AAAO,MAAP,AAAa,IAAb,AAAiB,AACjB;mBAAU,OAAV,AAAiB,AACjB;AACP;AAJI,OAAA,MAKA,AAAC;AACJ;YAAA,AAAG,UAAS,AACV;qBADU,AACV,AAAS,GAAI,AACb;AAED;AACD;AAED;AAED;;UAAI,QAAA,AAAQ,GAAZ,AAAe,QAAO,AAClB;AACA;YAAA,AAAG,UAAS,AAAG;AACX;iBAAA,AAAO,KAAP,AAAY,SAAZ,AAAqB,IAAI,CAAA,AAAC,IAAE,OADpB,AACR,AAAmC,WAAa,AACnD;AACJ;AAED;;AACA;UAAI,aAAJ,AAAiB,MAAK,AACpB;eAAA,AAAO,KAAP,AAAY,SAAZ,AAAqB,IAAI,OAAA,AAAO,KAAP,AAAY,SAAZ,AAAqB,IAArB,AAAwB,MAAM,MAAvD,AAA6D,AAC9D;AAEF;;;;4B,AAEO,G,AAAE,GAAE,AACV;WAAA,AAAK,KAAL,AAAU,IAAV,AAAY,AACZ;WAAA,AAAK,KAAL,AAAU,IAAV,AAAY,AAEZ;;UAAI,KAAA,AAAK,KAAT,AAAc,aAAY,AACxB;gBAAA,AAAQ,IAAR,AAAY,AACZ;aAAA,AAAK,KAAL,AAAU,YAAV,AAAsB,SAAtB,AAA+B,AAChC;AAHD,aAGK,AACH;gBAAA,AAAQ,IAAR,AAAY,AACZ;aAAA,AAAK,KAAL,AAAU,MAAV,AAAgB,SAAhB,AAAyB,AAC1B;AACF;;;;6BAEO,AACN;WAAA,AAAK,KAAL,AAAU,MAAV,AAAgB,OAAhB,AAAuB,AACxB;;;;;EAnFkB,O,AAAO;;AAsF5B,SAAA,AAAS,aAAT,AAAsB,SAAS,AAC7B;MAAI,QAAQ,GAAA,AAAG,KAAH,AAAQ,WAAR,AAAmB,GAA/B,AAAY,AAAsB,AAClC;MAAI,SAAJ,AAAa,AACb;OAAK,IAAI,IAAT,AAAa,GAAG,IAAI,KAAA,AAAK,QAAL,AAAa,GAAb,AAAgB,MAAhB,AAAsB,YAAtB,AAAkC,iBAAtD,AAAuE,QAAvE,AAA+E;QACzE,IAAI,KAAA,AAAK,QAAL,AAAa,GAAb,AAAgB,MAAhB,AAAsB,YAAtB,AAAkC,iBADwC,AAClF,AAAQ,AAAmD,GADuB,AAClF,CAAgE,AAChE;QAAI,EAAA,AAAE,UAAU,QAAA,AAAQ,KAApB,AAAyB,QAAQ,EAAA,AAAE,UAAU,QAAA,AAAQ,KAAzD,AAA8D;UACxD,IAAI,GAAA,AAAG,KAAH,AAAQ,IAAI,EAAZ,AAAc,SADmD,AACzE,AAAQ,AAAuB,OAD0C,AACzE,CAAuC,AACvC;UAAI,EAAA,AAAE,UAAU,QAAA,AAAQ,KAAxB,AAA6B,MAAM,KAAK,CAAL,AAAM,AACzC;UAAI,IAAJ,AAAQ,KAAK,SAAA,AAAS,AACvB;AACF;AAAC,UAAA,AAAO,AACV;;;kB,AAEc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;I,ACnGT;wBAEL;;sBAAA,AAAY,MAAZ,AAAkB,GAAlB,AAAqB,GAArB,AAAwB;wBAAM;;wHAAA,AAEvB,MAFuB,AAEjB,GAFiB,AAEd,GAFc,AAEX,MAAM,EAAE,MAAF,AAAQ,aAAa,MAArB,AAA2B,WAAW,OAFjC,AAEL,AAA6C,AAErE;;QAAA,AAAK,SAJwB,AAI7B,AAAc,IAJe,CAIV,AACnB;QAAA,AAAK,cAAL,AAAmB,AACnB;QAAA,AAAK,UAAU,CAAA,AAAC,WAAD,AAAY,WAAZ,AAAuB,WAAvB,AAAkC,WAAjD,AAAe,AAA6C,AAE5D;;QAAA,AAAK,AACL;QAAA,AAAK,AAEL;;QAAA,AAAK,KAAL,AAAU,MAAV,AAAgB,SAXa;;SAa7B;;;;;+BAEY,AACZ;QAAA,AAAK,KAAL,AAAU,KAAV,AAAe,OAAf,AAAsB,KAAK,KAA3B,AAAgC,QAAQ,KAAxC,AAA6C,UAA7C,AAAuD,MAAvD,AAA6D,MAA7D,AAAmE,AACnE;;;;6BAEU,AAEV;;QAAK,IAAI,IAAT,AAAa,GAAG,IAAI,KAAA,AAAK,KAAzB,AAA8B,QAA9B,AAAsC,KAAK,AAE1C;;QAAI,KAAA,AAAK,gBAAgB,KAAA,AAAK,QAA9B,AAAsC,QAAQ,AAC7C;UAAA,AAAK,cAAL,AAAmB,AACnB;AAED;;SAAA,AAAK,SAAS,KAAA,AAAK,QAAQ,KAA3B,AAAc,AAAkB,cAAhC,AAA8C,AAC9C;SAAA,AAAK,AAEL;AAED;;;;;EAlCwB,O,AAAO;;kB,AAsClB;;;;;;;;;;;;;;;;;;;ACtCf;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;I,AAEM;;;;;;;;;;;4BAEI,AAER;;AACE;QAAA,AAAK,KAAL,AAAU,QAAV,AAAkB,SAAlB,AAA2B,mBAA3B,AAA8C,MAAM,OAAA,AAAO,QAA3D,AAAmE,AACrE;QAAA,AAAK,KAAL,AAAU,MAAV,AAAgB,eAAhB,AAA+B,AAC/B;QAAA,AAAK,KAAL,AAAU,MAAV,AAAgB,aAAhB,AAA6B,AAG3B;;WAAA,AAAQ,IAAR,AAAY,AACd;QAAA,AAAK,KAAL,AAAU,eAAV,AAAyB,IAAI,KAA7B,AAAkC,cAAlC,AAA+C,AAC/C;QAAA,AAAK,KAAL,AAAU,eAAV,AAAyB,IAAI,KAA7B,AAAkC,cAAlC,AAA+C,AAE/C;;OAAI,SAAS,EAAE,GAAG,KAAA,AAAK,KAAL,AAAU,MAAf,AAAqB,SAAS,GAAG,KAAA,AAAK,KAAL,AAAU,MAAxD,AAAa,AAAiD,AAC9D;QAAA,AAAK,OAAO,0BAAgB,KAAhB,AAAqB,MAAM,OAA3B,AAAkC,GAAG,OAArC,AAA4C,GAAxD,AAAY,AAA+C,AAC3D;QAAA,AAAK,KAAL,AAAU,OAAV,AAAiB,IAAjB,AAAqB,AACrB;;;;iCAEa,AACb;QAAA,AAAK,KAAL,AAAU,OAAV,AAAiB,AACjB;QAAA,AAAK,QAAQ,KAAA,AAAK,MAAL,AAAW,SAAX,AAAoB,OAAO,OAAA,AAAO,SAA/C,AAAa,AAA2C,AACxD;OAAI,OAAJ,AAAW,OAAM,AAAC;SAAA,AAAK,AAAY;AACnC;;;;+B,AAEY,UAAS,AACrB;QAAA,AAAK,KAAL,AAAU,OAAO,KAAA,AAAK,MAAL,AAAW,YAA5B,AAAsC,AACtC;;;;2BAEO,AACP;OAAI,KAAA,AAAK,SAAS,KAAA,AAAK,MAAvB,AAA6B,QAAO,AACnC;SAAA,AAAK,AACL;AACD;;;;6BAES,AACT;QAAA,AAAK,KAAL,AAAU,AACV;AACA;QAAA,AAAK,MAAL,AAAW,MAAX,AAAiB,AACjB;;;;;EAvCyB,O,AAAO;;kB,AA2CnB;;;;;;;;;;;;;;;;;;;AC9Cf;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;I,AAEM;;;;;;;;;;;6BAEI,AAER;;UAAI,SAAS,EAAE,GAAG,KAAA,AAAK,KAAL,AAAU,MAAf,AAAqB,SAAS,GAAG,KAAA,AAAK,KAAL,AAAU,MAAxD,AAAa,AAAiD,AAC9D;WAAA,AAAK,KAAL,AAAU,MAAV,AAAgB,kBAAhB,AAAkC,AAClC;UAAI,OAAJ,AAAW,AAEX;;AAEA;;UAAI,MAAM,KAAA,AAAK,MAAM,OAAA,AAAO,MAAM,KAAA,AAAK,KAAL,AAAU,IAAV,AAAc,QAAhD,AAAkC,AAAsB,AACxD;UAAA,AAAI,gBAAJ,AAAoB,SAApB,AAA4B,AAE5B;;WAAA,AAAK,QAAL,AAAa,YAAY,OAAA,AAAO,QAAhC,AAAwC,AACxC;WAAA,AAAK,QAAL,AAAa,GAAb,AAAgB,QAAhB,AAAwB,IAAxB,AAA4B,AAE5B;;WAAA,AAAK,eAAL,AAAoB,AACpB;AACA;UAAA,AAAI,OAAJ,AAAW,QAAQ,UAAA,AAAS,GAAE,AAC7B;YAAI,QAAQ,IAAA,AAAI,YAAY,EAA5B,AAAY,AAAkB,AAC9B;YAAI,EAAA,AAAE,QAAN,AAAc,YAAW,AACxB;eAAA,AAAK,eAAL,AAAoB,AACpB;gBAAA,AAAM,QAAN,AAAY,AACZ;gBAAA,AAAM,AACN;AACA;eAAA,AAAK,cAAc,KAAA,AAAK,IAAxB,AAAmB,AAAS,AAC5B;AAED;AAVD,AAYA;;AAEA;;WAAA,AAAK,aAAa,0BAAlB,AAAkB,AAAgB,AAClC;WAAA,AAAK,WAAL,AAAgB,QAAhB,AAAwB,AACxB;WAAA,AAAK,WAAL,AAAgB,QAAhB,AAAwB,AACxB;WAAA,AAAK,WAAL,AAAgB,OAAhB,AAAuB,AACvB;WAAA,AAAK,MAAL,AAAW,UAAU,CAAC,KAAtB,AAAqB,AAAM,AAE3B;;AACA;AACA;UAAA,AAAI,wBAAJ,AAA4B,IAA5B,AAAgC,MAAhC,AAAsC,YAAtC,AAAkD,AAElD;;WAAA,AAAK,kBAAkB,KAAA,AAAK,QAAL,AAAa,GAAb,AAAgB,eAAhB,AAA+B,KAAK,KAA3D,AAAuB,AAAyC,AAChE;WAAA,AAAK,qBAAqB,KAAA,AAAK,QAAL,AAAa,GAAb,AAAgB,wBAAhB,AAAwC,KAzC1D,AAyCR,AAA0B,AAA4C,eAAiB,AAEvF;;AACA;WAAA,AAAK,SAAS,qBAAW,KAAX,AAAgB,MAAhB,AAAqB,GAAnC,AAAc,AAAuB,AACnC;WAAA,AAAK,OAAL,AAAY,OAAO,KAAnB,AAAwB,AAC1B;WAAA,AAAK,OAAL,AAAY,WAAW,IAAI,OAAJ,AAAW,UAAU,MAAA,AAAI,IAAzB,AAA2B,IAAG,MAAA,AAAI,IAAlC,AAAoC,IAApC,AAAuC,IAA9D,AAAuB,AAA0C,AACjE;WAAA,AAAK,QAAL,AAAa,GAAb,AAAgB,QAAhB,AAAwB,IAAxB,AAA4B,AAE5B;;AACA;UAAI,gBAAgB,KAAA,AAAK,KAAL,AAAU,QAAV,AAAkB,GAAlB,AAAqB,eAAzC,AAAoB,AAAoC,AACxD;AACA;WAAA,AAAK,mBAAL,AAAwB,QAAQ,UAAA,AAAS,GAAE,AAAC;UAAA,AAAE,YAAF,AAAc,AAAgB;AAA1E,AACA;WAAA,AAAK,gBAAL,AAAqB,QAAQ,UAAA,AAAS,GAAE,AAAC;UAAA,AAAE,YAAF,AAAc,AAAgB;AAAvE,AAEA;;UAAI,iBAAiB,KAAA,AAAK,KAAL,AAAU,QAAV,AAAkB,GAAlB,AAAqB,eAArB,AAAoC,kBAAkB,KAAA,AAAK,OAAhF,AAAqB,AAAkE,AACvF;WAAA,AAAK,KAAL,AAAU,QAAV,AAAkB,GAAlB,AAAqB,iBAArB,AAAsC,eAAtC,AAAqD,MAArD,AAA2D,MAA3D,AAAiE,MAAjE,AAAuE,AAEvE;;UAAI,iBAAiB,KAAA,AAAK,KAAL,AAAU,QAAV,AAAkB,GAAlB,AAAqB,sBAArB,AAA2C,gBAA3C,AAA2D,eAAe,EAAE,UAAjG,AAAqB,AAA0E,AAAY,AAE3G;;AACA;WAAA,AAAK,OAAL,AAAY,QAAZ,AAAoB,IAApB,AAAuB,AAGvB;;;;6BAEO,AACP;WAAA,AAAK,WAAL,AAAgB,OAAO,KAAA,AAAK,IAAI,KAAA,AAAK,IAAI,CAAC,KAAA,AAAK,KAAL,AAAU,OAAV,AAAiB,IAAlB,AAAoB,OAA7B,AAAmC,MAA5C,AAAS,AAAwC,MAAxE,AAAuB,AAAsD,AAC7E;;;;;EAtEyB,O,AAAO;;kB,AA8EnB",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "class FullscreenController{\r\n  constructor(game){\r\n    this.game = game;\r\n\r\n    //add element\r\n    this.el = document.createElement('span');\r\n    this.el.classList.add(\"fullscreen-button\");\r\n\r\n    let text = document.createElement('span');\r\n    text.textContent=\"Go Fullscreen\";\r\n    this.el.appendChild(text);\r\n\r\n    let svg = document.createElementNS(\"http://www.w3.org/2000/svg\",'svg');\r\n    svg.setAttribute(\"width\", \"30px\");\r\n    svg.setAttribute(\"height\", \"30px\");\r\n    svg.setAttribute('viewBox',\"0 0 50 50\")\r\n    svg.setAttribute(\"version\", \"1.1\");\r\n    svg.innerHTML = `\r\n    <polygon points=\"0 0 30 0 0 30 0 0\" />\r\n    <polygon points=\"50 50 20 50 50 20 50 50\" />\r\n    `;\r\n    this.el.appendChild(svg);\r\n\r\n    this.el.addEventListener('click',()=>this.gofull() );\r\n    document.getElementById('content-after').appendChild(this.el);\r\n\r\n  }\r\n\r\n\r\n  gofull() {\r\n    if (this.game.scale.isFullScreen){\r\n        this.game.scale.stopFullScreen();\r\n        this.game.canvas.classList.add('fullscreen');\r\n    }\r\n    else{\r\n        this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;\r\n        this.game.scale.startFullScreen(false);\r\n        this.game.canvas.classList.remove('fullscreen');\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default FullscreenController;\r\n",
    "class LevelController{\r\n  constructor(game){\r\n    this.game = game;\r\n  }\r\n}\r\n\r\nexport default LevelController;\r\n",
    "import LoadingState from 'states/LoadingState';\r\nimport PlayingState from 'states/PlayingState';\r\n\r\nimport FullscreenController  from 'controllers/FullscreenController'\r\nimport LevelController from 'controllers/LevelController'\r\n\r\nclass Game extends Phaser.Game {\r\n\r\n\tconstructor() {\r\n\t\tvar config = {\r\n\t\t    width: 320,\r\n\t\t    height: 240,\r\n\t\t    renderer: Phaser.AUTO,\r\n\t\t    antialias: false,\r\n\t\t\t\tresolution:2,\r\n\t\t    multiTexture: true,\r\n\t\t\t\tparent:'content'\r\n\t\t}\r\n\t\tsuper(config);\r\n\t\tthis.fullscreenController = new FullscreenController(this);\r\n\r\n\t\tthis.state.add('LoadingState', LoadingState, false);\r\n\t\tthis.state.add('PlayingState', PlayingState, false);\r\n\r\n\t\tthis.state.start('LoadingState');\r\n\t\twindow.debug = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nwindow.game = new Game();\r\n",
    "class CurvyShader extends Phaser.Filter{\r\n  constructor(game){\r\n      super(game);\r\n\r\n      this.game = game;\r\n      this.uniforms.invert = { type: '1f', value: 0 };\r\n      this.uniforms.pixelSize = { type: '2f', value: { x: 1.0, y: 1.0 } };\r\n      this.uniforms.dimensions = { type: '2f', value: { x: 1000.0, y: 1000.0 } };\r\n\r\n      this.uniforms.warp = { type: '1f', value: 0 };\r\n      this.uniforms.offset = { type: '1f', value: 0 };\r\n\r\n      this.fragmentSrc = `\r\n\r\n          #define PI 3.14159\r\n          #define SQRT2 1.4142135623730951\r\n          precision mediump float;\r\n          varying vec2 vTextureCoord;\r\n          uniform vec2 dimensions;\r\n          uniform vec2 pixelSize;\r\n          uniform float offset;\r\n          uniform float warp;\r\n          uniform sampler2D uSampler;\r\n          void main(void){\r\n              // coords are 0..1.  Don't exceed that.\r\n              // zoom out the Y coords based on warp\r\n              float sc = warp*1./SQRT2;\r\n\r\n              vec2 zoomCoords = vec2(\r\n                 0.5+(vTextureCoord.x-0.5)*(1.0 - abs(sc)),\r\n                 0.5+(vTextureCoord.y-0.5)*(1.0 - abs(sc))\r\n               );\r\n              // now sample the middle up higher and outsides down lower\r\n              // TODO: determine the actual math for this\r\n\r\n              float moveUp = (0.9 -cos((vTextureCoord.x - 0.5) * PI/2.0 )) * warp ;\r\n              vec2 coord = zoomCoords + vec2(0.0,moveUp);\r\n              vec2 color =  coord ;\r\n              gl_FragColor = texture2D(uSampler, color);\r\n          }\r\n      `;\r\n\r\n  }\r\n\r\n}\r\n\r\n/**\r\n* An object with visible x and y properties that are used to define the size of the filter effect per pixel.\r\n*\r\n* @property size\r\n* @type Phaser.Point\r\n*/\r\nObject.defineProperty(CurvyShader.prototype, 'size', {\r\n    get: function() {\r\n\r\n        return this.uniforms.pixelSize.value;\r\n\r\n    },\r\n\r\n    set: function(value) {\r\n\r\n        this.dirty = true;\r\n        this.uniforms.pixelSize.value = value;\r\n\r\n    }\r\n});\r\n\r\n/**\r\n* A value that defines the horizontal size of the filter effect per pixel.\r\n*\r\n* @property sizeX\r\n* @type number\r\n*/\r\nObject.defineProperty(CurvyShader.prototype, 'sizeX', {\r\n    get: function() {\r\n        return this.uniforms.pixelSize.value.x;\r\n    },\r\n\r\n    set: function(value) {\r\n        this.dirty = true;\r\n        this.uniforms.pixelSize.value.x = value;\r\n    }\r\n});\r\n\r\n/**\r\n* A value that defines the vertical size of the filter effect per pixel.\r\n*\r\n* @property sizeY\r\n* @type number\r\n*/\r\nObject.defineProperty(CurvyShader.prototype, 'sizeY', {\r\n    get: function() {\r\n        return this.uniforms.pixelSize.value.y;\r\n    },\r\n    set: function(value) {\r\n        this.dirty = true;\r\n        this.uniforms.pixelSize.value.y = value;\r\n    }\r\n});\r\n\r\n/**\r\n* A value that defines the vertical size of the filter effect per pixel.\r\n*\r\n* @property sizeY\r\n* @type number\r\n*/\r\nObject.defineProperty(CurvyShader.prototype, 'warp', {\r\n    get: function() {\r\n        return this.uniforms.warp.value;\r\n    },\r\n    set: function(value) {\r\n        this.dirty = true;\r\n        this.uniforms.warp.value = value;\r\n    }\r\n});\r\n\r\n/**\r\n* A value that defines the vertical size of the filter effect per pixel.\r\n*\r\n* @property sizeY\r\n* @type number\r\n*/\r\nObject.defineProperty(CurvyShader.prototype, 'offset', {\r\n    get: function() {\r\n        return this.uniforms.offset.value;\r\n    },\r\n    set: function(value) {\r\n        this.dirty = true;\r\n        this.uniforms.offset.value = value;\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\nexport default CurvyShader;\r\n",
    "class Player extends Phaser.Sprite{\r\n\r\n  constructor(game,key,frame){\r\n    super(game,0,0,'character',0);\r\n    this.game = game;\r\n\r\n    // settings\r\n    this.speed=150;\r\n    this.jumpSpeed = 200;\r\n    this.mass = .00000000000000001;\r\n    this.size = 16;\r\n\r\n    // physics stuffs\r\n    game.physics.p2.enable(this);\r\n    this.body.mass = this.mass;\r\n\t\tgame.physics.p2.enable(this);\r\n\t\tthis.anchor.setTo(0.5,0.5); // set the anchor to the exact middle of the player (good for flipping the image on the same place)\r\n\t\tthis.body.setCircle(this.size,0,0);\r\n\t\tthis.body.fixedRotation=true;\r\n\r\n\r\n    // create cursors\r\n    this.cursors = this.game.input.keyboard.createCursorKeys();\r\n\r\n  }\r\n\r\n  update(){\r\n    let cursors = this.cursors;\r\n    let player = this;\r\n    let touching = touchingDown(player)\r\n    let desiredX = null;\r\n    // update the player\r\n\r\n    if (cursors.left.isDown ){   //  Move to the left\r\n            player.scale.x = -1;  // a little trick.. flips the image to the left\r\n            desiredX = -1*player.speed;\r\n            //player.animations.play('walk');\r\n\r\n    }\r\n    else if (cursors.right.isDown) {//  Move to the right\r\n            player.scale.x = 1;\r\n            desiredX= player.speed;\r\n            //player.animations.play('walk');\r\n    }\r\n    else {// pressing neither dir\r\n      if(touching){\r\n        desiredX=0;  // stop on the ground\r\n        //player.loadTexture('mario', 0);   // this loads the frame 0 of my mario spritesheet  (stand)\r\n\r\n      }\r\n      // apply drag in the air\r\n\r\n    }\r\n\r\n    if (cursors.up.isDown){\r\n        //player.loadTexture('mario', 5);   // this loads the frame 5 (jump) of my mario spritesheet\r\n        if(touching){  // this checks if the player is on the floor (we don't allow airjumps)\r\n            player.body.velocity.y = -1*player.jumpSpeed;   // change the y velocity to -800 means \"jump!\"\r\n        }\r\n    }\r\n\r\n    // approach desiredX\r\n    if (desiredX !== null){\r\n      player.body.velocity.x = player.body.velocity.x *0.5 + 0.5 * desiredX;\r\n    }\r\n\r\n  }\r\n\r\n  spawnTo(x,y){\r\n    this.body.x=x;\r\n    this.body.y=y;\r\n\r\n    if (this.game.playerGroup){\r\n      console.log('add to player group');\r\n      this.game.playerGroup.addChild(this);\r\n    }else{\r\n      console.log('no player group');\r\n      this.game.world.addChild(this);\r\n    }\r\n  }\r\n\r\n  remove(){\r\n    this.game.world.remove(this);\r\n  }\r\n}\r\n\r\nfunction touchingDown(someone) {\r\n\t\tvar yAxis = p2.vec2.fromValues(0, 1);\r\n\t\tvar result = false;\r\n\t\tfor (var i = 0; i < game.physics.p2.world.narrowphase.contactEquations.length; i++) {\r\n\t\t\t\tvar c = game.physics.p2.world.narrowphase.contactEquations[i];  // cycles through all the contactEquations until it finds our \"someone\"\r\n\t\t\t\tif (c.bodyA === someone.body.data || c.bodyB === someone.body.data)        {\r\n\t\t\t\t\t\tvar d = p2.vec2.dot(c.normalA, yAxis); // Normal dot Y-axis\r\n\t\t\t\t\t\tif (c.bodyA === someone.body.data) d *= -1;\r\n\t\t\t\t\t\tif (d > 0.5) result = true;\r\n\t\t\t\t}\r\n\t\t} return result;\r\n}\r\n\r\nexport default Player\r\n",
    "class RainbowText extends Phaser.Text {\r\n\r\n\tconstructor(game, x, y, text) {\r\n\r\n\t\tsuper(game, x, y, text, { font: \"2em Arial\", fill: \"#ff0044\", align: \"center\" });\r\n\r\n\t\tthis._speed = 125; //ms\r\n\t\tthis._colorIndex = 0;\r\n\t\tthis._colors = ['#ee4035', '#f37736', '#fdf498', '#7bc043', '#0392cf'];\r\n\r\n\t\tthis.colorize();\r\n\t\tthis.startTimer();\r\n\r\n\t\tthis.game.stage.addChild(this);\r\n\r\n\t}\r\n\r\n\tstartTimer() {\r\n\t\tthis.game.time.events.loop(this._speed, this.colorize, this).timer.start();\r\n\t}\r\n\r\n\tcolorize() {\r\n\r\n\t\tfor (let i = 0; i < this.text.length; i++) {\r\n\r\n\t\t\tif (this._colorIndex === this._colors.length) {\r\n\t\t\t\tthis._colorIndex = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.addColor(this._colors[this._colorIndex], i);\r\n\t\t\tthis._colorIndex++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RainbowText;\r\n",
    "import RainbowText from 'objects/RainbowText';\r\nimport PlayingState from 'states/PlayingState'\r\n\r\nclass LoadingState extends Phaser.State {\r\n\r\n\tpreload(){\r\n\r\n\t\t// assets go here\r\n    game.load.tilemap('world', 'maps/world.json', null, Phaser.Tilemap.TILED_JSON);\r\n\t\tgame.load.image('paint_tiles', 'img/paint_tiles.png');\r\n\t\tgame.load.image('character', 'img/character.png');\r\n\r\n\r\n    console.log('loading');\r\n\t\tgame.load.onLoadComplete.add(this.loadComplete,this\t);\r\n\t\tgame.load.onFileComplete.add(this.fileComplete,this\t);\r\n\r\n\t\tlet center = { x: this.game.world.centerX, y: this.game.world.centerY }\r\n\t\tthis.text = new RainbowText(this.game, center.x, center.y, \"- phaser -\\nwith a sprinkle of\\nES6 dust!\");\r\n\t\tthis.text.anchor.set(0.5);\r\n\t}\r\n\r\n\tloadComplete(){\r\n\t\tthis.text.text = 'Loaded.\\nPress ENTER to start';\r\n\t\tthis.enter = game.input.keyboard.addKey(Phaser.Keyboard.ENTER);\r\n\t\tif (window.debug){this.whenDone();}\r\n\t}\r\n\r\n\tfileComplete(progress){\r\n\t\tthis.text.text = Math.round(progress)+'% loaded';\r\n\t}\r\n\r\n\tupdate(){\r\n\t\tif (this.enter && this.enter.isDown){\r\n\t\t\tthis.whenDone();\r\n\t\t}\r\n\t}\r\n\r\n\twhenDone(){\r\n\t\tthis.text.destroy();\r\n\t\t// transition to playing state\r\n\t\tgame.state.start('PlayingState');\r\n\t}\r\n\r\n}\r\n\r\nexport default LoadingState;\r\n",
    "import RainbowText from 'objects/RainbowText';\r\nimport Player from 'objects/Player';\r\nimport CurvyShader from 'objects/CurvyShader'\r\n\r\nclass PlayingState extends Phaser.State {\r\n\r\n\tcreate() {\r\n\r\n\t\tlet center = { x: this.game.world.centerX, y: this.game.world.centerY }\r\n\t\tthis.game.stage.backgroundColor = '#787878';\r\n\t\tlet self = this;\r\n\r\n\t\t//create maps\r\n\r\n\t\tvar map = this.map = window.map = this.game.add.tilemap('world');\r\n\t\tmap.addTilesetImage('tiles','paint_tiles');\r\n\r\n\t\tgame.physics.startSystem(Phaser.Physics.P2JS);\r\n\t\tgame.physics.p2.gravity.y = 1400;\r\n\r\n\t\tthis.physicsLayer = null;\r\n\t\t// render each layer of the map\r\n\t\tmap.layers.forEach(function(l){\r\n\t\t\tlet layer = map.createLayer(l.name);\r\n\t\t\tif (l.name == 'physical'){\r\n\t\t\t\tself.physicsLayer = layer;\r\n\t\t\t\tlayer.debug=false;\r\n\t\t\t\tlayer.resizeWorld();\r\n\t\t\t\t// now add the layer for the player\r\n\t\t\t\tgame.playerGroup = game.add.group();\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t\t// create filter\r\n\r\n\t\tthis.warpFilter = new CurvyShader(game);\r\n\t\tthis.warpFilter.sizeX = 10;\r\n\t\tthis.warpFilter.sizeY = 10;\r\n\t\tthis.warpFilter.warp = 0;\r\n\t\tthis.world.filters = [this.warpFilter];\r\n\r\n\t\t// init physics\r\n\t\t// enable collision on all tiles in the physical layer\r\n\t\tmap.setCollisionByExclusion([], true, 'physical', true)\r\n\r\n\t\tthis.layermain_tiles = game.physics.p2.convertTilemap(map, this.physicsLayer);\r\n\t\tthis.layerobjects_tiles = game.physics.p2.convertCollisionObjects(map,\"collisions\");   // this converts the polylines of the tiled - object layer into physics bodies.. make sure to use the \"polyline\" tool and not the \"polygon\" tool - otherwise it will not work!!\r\n\r\n\t\t// create player\r\n\t\tthis.player = new Player(this.game,0,0);\r\n    game.camera.follow(this.player);\r\n\t\tgame.camera.deadzone = new Phaser.Rectangle(320/2-20,240/2-40,20,40);\r\n\t\tgame.physics.p2.gravity.y = 300;\r\n\r\n\t\t// player physics\r\n\t\tvar worldMaterial = this.game.physics.p2.createMaterial('worldMaterial');\r\n\t\t// apply to world tiles\r\n\t\tthis.layerobjects_tiles.forEach(function(t){t.setMaterial(worldMaterial);});\r\n\t\tthis.layermain_tiles.forEach(function(t){t.setMaterial(worldMaterial);});\r\n\r\n\t\tvar spriteMaterial = this.game.physics.p2.createMaterial('spriteMaterial', this.player.body);\r\n\t\tthis.game.physics.p2.setWorldMaterial(worldMaterial, true, true, true, true);\r\n\r\n\t\tvar groundPlayerCM = this.game.physics.p2.createContactMaterial(spriteMaterial, worldMaterial, { friction: 10000000.0 });\r\n\r\n\t\t//spawn player\r\n\t\tthis.player.spawnTo(40,40);\r\n\r\n\r\n\t}\r\n\r\n\tupdate(){\r\n\t\tthis.warpFilter.warp = Math.max(Math.min((this.game.camera.y-100) /3000,0.7),0)\r\n\t}\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default PlayingState;\r\n"
  ]
}