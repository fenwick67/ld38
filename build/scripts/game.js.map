{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src\\controllers\\FullscreenController.js",
    "src\\controllers\\LevelController.js",
    "src\\controllers\\Player.js",
    "src\\index.js",
    "src\\objects\\RainbowText.js",
    "src\\states\\LoadingState.js",
    "src\\states\\PlayingState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "class FullscreenController{\r\n  constructor(game){\r\n    this.game = game;\r\n\r\n    //add element\r\n    this.el = document.createElement('span');\r\n    this.el.classList.add(\"fullscreen-button\");\r\n\r\n    let text = document.createElement('span');\r\n    text.textContent=\"Go Fullscreen\";\r\n    this.el.appendChild(text);\r\n\r\n    let svg = document.createElementNS(\"http://www.w3.org/2000/svg\",'svg');\r\n    svg.setAttribute(\"width\", \"30px\");\r\n    svg.setAttribute(\"height\", \"30px\");\r\n    svg.setAttribute('viewBox',\"0 0 50 50\")\r\n    svg.setAttribute(\"version\", \"1.1\");\r\n    svg.innerHTML = `\r\n    <polygon points=\"0 0 30 0 0 30 0 0\" />\r\n    <polygon points=\"50 50 20 50 50 20 50 50\" />\r\n    `;\r\n    this.el.appendChild(svg);\r\n\r\n    this.el.addEventListener('click',()=>this.gofull() );\r\n    document.getElementById('content-after').appendChild(this.el);\r\n  }\r\n\r\n\r\n  gofull() {\r\n    if (this.game.scale.isFullScreen){\r\n        this.game.scale.stopFullScreen();\r\n    }\r\n    else{\r\n        this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;\r\n        this.game.scale.startFullScreen(false);\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default FullscreenController;\r\n",
    "class LevelController{\r\n  constructor(game){\r\n    this.game = game;\r\n  }\r\n}\r\n\r\nexport default LevelController;\r\n",
    "class Player extends Phaser.Sprite{\r\n\r\n  constructor(game,key,frame){\r\n    super(game,0,0,'paint_tiles',0);\r\n    this.game = game;\r\n\r\n  }\r\n\r\n  spawnTo(x,y){\r\n    this.x=x;\r\n    this.y=y;\r\n    this.game.world.addChild(this);\r\n  }\r\n\r\n  remove(){\r\n    this.game.world.remove(this);\r\n  }\r\n}\r\n\r\nexport default Player\r\n",
    "import LoadingState from 'states/LoadingState';\r\nimport PlayingState from 'states/PlayingState';\r\n\r\nimport FullscreenController from 'controllers/FullscreenController'\r\nimport LevelController from 'controllers/LevelController'\r\n\r\nclass Game extends Phaser.Game {\r\n\r\n\tconstructor() {\r\n\t\tvar config = {\r\n\t\t    width: 320,\r\n\t\t    height: 240,\r\n\t\t    renderer: Phaser.AUTO,\r\n\t\t    antialias: false,\r\n\t\t\t\tresolution:2,\r\n\t\t    multiTexture: true,\r\n\t\t\t\tparent:'content'\r\n\t\t}\r\n\t\tsuper(config);\r\n\t\tthis.fullscreenController = new FullscreenController(this);\r\n\r\n\t\tthis.state.add('LoadingState', LoadingState, false);\r\n\t\tthis.state.add('PlayingState', PlayingState, false);\r\n\r\n\t\tthis.state.start('LoadingState');\r\n\r\n\t}\r\n\r\n}\r\n\r\nwindow.game = new Game();\r\n",
    "class RainbowText extends Phaser.Text {\r\n\r\n\tconstructor(game, x, y, text) {\r\n\r\n\t\tsuper(game, x, y, text, { font: \"2em Arial\", fill: \"#ff0044\", align: \"center\" });\r\n\r\n\t\tthis._speed = 125; //ms\r\n\t\tthis._colorIndex = 0;\r\n\t\tthis._colors = ['#ee4035', '#f37736', '#fdf498', '#7bc043', '#0392cf'];\r\n\r\n\t\tthis.colorize();\r\n\t\tthis.startTimer();\r\n\r\n\t\tthis.game.stage.addChild(this);\r\n\r\n\t}\r\n\r\n\tstartTimer() {\r\n\t\tthis.game.time.events.loop(this._speed, this.colorize, this).timer.start();\r\n\t}\r\n\r\n\tcolorize() {\r\n\r\n\t\tfor (let i = 0; i < this.text.length; i++) {\r\n\r\n\t\t\tif (this._colorIndex === this._colors.length) {\r\n\t\t\t\tthis._colorIndex = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.addColor(this._colors[this._colorIndex], i);\r\n\t\t\tthis._colorIndex++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RainbowText;\r\n",
    "import RainbowText from 'objects/RainbowText';\r\nimport PlayingState from 'states/PlayingState'\r\n\r\nclass LoadingState extends Phaser.State {\r\n\r\n\tpreload(){\r\n\r\n\t\t// assets go here\r\n    game.load.tilemap('world', 'maps/world.json', null, Phaser.Tilemap.TILED_JSON);\r\n\t\tgame.load.image('paint_tiles', 'vendor/platformer_deluxe/Tiles/paint_tiles.png');\r\n\r\n    console.log('loading');\r\n\t\tgame.load.onLoadComplete.add(this.loadComplete,this\t);\r\n\t\tgame.load.onFileComplete.add(this.fileComplete,this\t);\r\n\r\n\t\tlet center = { x: this.game.world.centerX, y: this.game.world.centerY }\r\n\t\tthis.text = new RainbowText(this.game, center.x, center.y, \"- phaser -\\nwith a sprinkle of\\nES6 dust!\");\r\n\t\tthis.text.anchor.set(0.5);\r\n\t}\r\n\r\n\tloadComplete(){\r\n\t\tthis.text.text = 'Loaded.\\nPress ENTER to start';\r\n\t\tthis.enter = game.input.keyboard.addKey(Phaser.Keyboard.ENTER);\r\n\t}\r\n\r\n\tfileComplete(progress){\r\n\t\tthis.text.text = Math.round(progress)+'% loaded';\r\n\t}\r\n\r\n\tupdate(){\r\n\t\tif (this.enter && this.enter.isDown){\r\n\t\t\tthis.whenDone();\r\n\t\t}\r\n\t}\r\n\r\n\twhenDone(){\r\n\t\tthis.text.destroy();\r\n\t\t// transition to playing state\r\n\t\tgame.state.start('PlayingState');\r\n\t}\r\n\r\n}\r\n\r\nexport default LoadingState;\r\n",
    "import RainbowText from 'objects/RainbowText';\r\nimport Player from 'controllers/Player'\r\n\r\nclass PlayingState extends Phaser.State {\r\n\r\n\tcreate() {\r\n\r\n\t\tlet center = { x: this.game.world.centerX, y: this.game.world.centerY }\r\n\t\tthis.game.stage.backgroundColor = '#787878';\r\n\t\tlet self = this;\r\n\r\n\t\tvar map = this.map = window.map = this.game.add.tilemap('world');\r\n\t\tmap.addTilesetImage('tiles','paint_tiles');\r\n\r\n\r\n\t\tthis.physicsLayer = null;\r\n\t\t// render each layer of the map\r\n\t\tmap.layers.forEach(function(l){\r\n\t\t\tlet layer = map.createLayer(l.name);\r\n\t\t\tif (l.name == 'physical'){\r\n\t\t\t\tself.physicsLayer = layer;\r\n\t\t\t\tlayer.debug=true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t//this.physicsLayer = map.layers[map.getLayer('physical')];\r\n\r\n\t\t// init physics\r\n\t\t// enable collision on all tiles in the physical layer\r\n\t\tmap.setCollisionByExclusion([], true, 'physical', true)\r\n\r\n\t\tthis.player = new Player(this,0,0);\r\n\t\tgame.physics.enable(this.player);\r\n\r\n\t\tthis.player.body.bounce.set(0.1);\r\n\t\tthis.player.body.tilePadding.set(32);\r\n\t\t//game.physics.enable(this.physicsLayer);\r\n\r\n\t\tthis.player.spawnTo(16,16);\r\n\r\n    game.camera.follow(this.player, Phaser.Camera.FOLLOW_PLATFORMER);\r\n\t\tgame.physics.arcade.gravity.y = 300;\r\n\r\n\t}\r\n\r\n\tupdate(){\r\n\t\tgame.physics.arcade.collide(this.player, this.physicsLayer, this.collisionHandler, null, this);\r\n\t}\r\n\r\n\tcollisionHandler(b1,b2){\r\n\t\t//console.log(arguments);\r\n\t}\r\n\r\n}\r\n\r\nexport default PlayingState;\r\n"
  ]
}